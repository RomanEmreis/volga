[package]
name = "volga"
version = "0.6.4"
edition = "2021"
rust-version = "1.80.0"
authors = ["Roman Emreis <roman.emreis@outlook.com>"]
license = "MIT"
repository = "https://github.com/RomanEmreis/volga"
description = "Easy & Fast Web Framework for Rust"
documentation = "https://docs.rs/volga"
readme = "README.md"
homepage = "https://romanemreis.github.io/volga-docs"
categories = ["web-programming::http-server"]
keywords = ["volga", "server", "http", "web", "framework"]

[dependencies]
# required
bytes = "1.10.1"
futures-util = { version = "0.3.31", default-features = false, features = ["alloc"] }
http-body-util = "0.1.3"
itoa = "1.0.15"
indexmap = "2.11.0"
memchr = "2.7.5"
mime = "0.3.17"
mime_guess = "2.0.5"
pin-project-lite = "0.2.16"
tokio = { version = "1.47.1", features = ["full"] }
tokio-util = "0.7.16"
serde = "1.0.219"
serde_json = "1.0.143"
serde_urlencoded = "0.7.1"

# optional
async-compression = { version = "0.4.29", features = ["tokio"], optional = true }
base64 = { version = "0.22.1", optional = true }
chrono = { version = "0.4.41", optional = true }
cookie = { version = "0.18.1", features = ["percent-encode"], optional = true }
jsonwebtoken = { version = "9.3.1", optional = true }
handlebars = { version = "6.3.2", optional = true }
httpdate = { version = "1.0.3", optional = true }
hyper = { version = "1.6.0", features = ["server"], optional = true }
hyper-util = { version = "0.1.16", features = ["server", "server-auto", "server-graceful", "service", "tokio"], optional = true }
multer = { version = "3.1.0", optional = true }
sha1 = { version = "0.10.6", optional = true }
tokio-rustls = { version = "0.26.2", default-features = false, features = ["tls12", "ring"], optional = true }
tokio-tungstenite = { version = "0.27.0", optional = true }
tracing = { version = "0.1.41", default-features = false, optional = true }
volga-di = { path = "../volga-di", version = "0.6.4", optional = true }
volga-macros = { path = "../volga-macros", version = "0.6.4", optional = true }

[dev-dependencies]
base64 = { version = "0.22.1" }
jsonwebtoken = "9.3.1"
hyper = { version = "1.7.0", features = ["client"] }
reqwest = { version = "0.12.23", features = ["blocking", "multipart", "stream", "json", "http2", "brotli", "deflate", "gzip", "zstd", "native-tls"] }
serde = { version = "1.0.219", features = ["derive"] }
tokio-stream = "0.1.17"
tracing-subscriber = { version = "0.3.20", features = ["env-filter"] }
uuid = { version = "1.18.0", features = ["v4"] }
criterion = { version = "0.7.0", features = ["async_tokio"] }

[features]
# Default HTTP/1 only server
default = ["http1"]
# HTTP/1 and HTTP/2 server
full = [
    "http1", 
    "http2",
    "auth",
    "middleware", 
    "di",
    "tls",
    "cookie-full",
    "tracing",
    "multipart",
    "problem-details",
    "static-files",
    "compression-full", 
    "decompression-full",
    "ws"
]

http1 = ["dep:hyper", "hyper?/http1", "dep:hyper-util", "hyper-util?/http1", "dep:httpdate"]
http2 = ["dep:hyper", "hyper?/http2", "dep:hyper-util", "hyper-util?/http2", "dep:httpdate"]

auth = ["basic-auth", "jwt-auth"]
basic-auth = ["dep:base64", "middleware"]
jwt-auth = ["dep:jsonwebtoken", "middleware"]
jwt-auth-full = ["jwt-auth", "dep:volga-macros", "volga-macros?/jwt-auth-derive"]
di = ["dep:volga-di"]
di-full = ["di", "volga-di?/macros"]
macros = ["dep:volga-macros"]
middleware = []
multipart = ["dep:multer"]
problem-details = []
static-files = ["dep:chrono", "dep:handlebars", "dep:sha1"]
tls = ["middleware", "dep:tokio-rustls", "tokio-rustls?/tls12", "tokio-rustls?/ring"]
tracing = ["middleware", "dep:tracing"]
ws = ["dep:sha1", "dep:base64", "dep:tokio-tungstenite"]

cookie-full = ["cookie", "private-cookie", "signed-cookie"]
cookie = ["dep:cookie"]
private-cookie = ["di", "dep:cookie", "cookie?/private"]
signed-cookie = ["di", "dep:cookie", "cookie?/signed"]

compression-full = ["compression-brotli", "compression-gzip", "compression-zstd"]
compression-brotli = ["middleware", "dep:async-compression", "async-compression?/brotli"]
compression-gzip = ["middleware", "dep:async-compression", "async-compression?/zlib", "async-compression?/gzip"]
compression-zstd = ["middleware", "dep:async-compression", "async-compression?/zstd"]

decompression-full = ["decompression-brotli", "decompression-gzip", "decompression-zstd"]
decompression-brotli = ["middleware", "dep:async-compression", "async-compression?/brotli"]
decompression-gzip = ["middleware", "dep:async-compression", "async-compression?/zlib", "async-compression?/gzip"]
decompression-zstd = ["middleware", "dep:async-compression", "async-compression?/zstd"]

[package.metadata.docs.rs]
all-features = true

[[bench]]
name = "server"
harness = false

[[bench]]
name = "di"
harness = false
required-features = ["di"]

[[bench]]
name = "mw"
harness = false
required-features = ["middleware"]

[[bench]]
name = "auth"
harness = false
required-features = ["jwt-auth","middleware"]

[[test]]
name = "middleware_mapping_tests"
required-features = ["middleware"]

[[test]]
name = "compression"
required-features = ["compression-full"]

[[test]]
name = "decompression"
required-features = ["decompression-full"]

[[test]]
name = "tls"
required-features = ["tls"]

[[test]]
name = "tracing"
required-features = ["tracing"]

[[test]]
name = "static_files"
required-features = ["static-files"]

[[test]]
name = "ws"
required-features = ["ws"]

[[test]]
name = "cors"
required-features = ["middleware"]

[[test]]
name = "sse"

[[test]]
name = "jwt"
required-features = ["jwt-auth-full", "middleware"]

[[test]]
name = "response_caching"
required-features = ["middleware"]